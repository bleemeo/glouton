// Copyright 2015-2025 Bleemeo
//
// bleemeo.com an infrastructure monitoring solution in the Cloud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//go:build !windows

package facts

import (
	"context"
	"strconv"
	"strings"
	"time"

	"github.com/bleemeo/glouton/types"
	"github.com/bleemeo/glouton/version"

	"github.com/shirou/gopsutil/v3/process"
)

// Processes retrieves the list of all the current processes and their respective information.
func (z PsutilLister) Processes(ctx context.Context) (processes []Process, factory func() types.ProcIter, err error) {
	psutilProcesses, err := process.Processes()
	if err != nil {
		return nil, nil, err
	}

	processes = make([]Process, 0)

	for _, p := range psutilProcesses {
		res := Process{
			PID: int(p.Pid),
		}

		ts, err := p.CreateTimeWithContext(ctx)
		if err == nil {
			createTime := time.Unix(ts/1000, (ts%1000)*1000000)

			res.CreateTime = createTime
			res.CreateTimestamp = createTime.Unix()
		}

		ppid, err := p.PpidWithContext(ctx)
		if err == nil {
			res.PPID = int(ppid)
		}

		res.Username, err = p.UsernameWithContext(ctx)
		if err != nil {
			if version.IsWindows() {
				uids, err := p.UidsWithContext(ctx)
				if err == nil && len(uids) > 0 {
					res.Username = strconv.Itoa(int(uids[0]))

					if z.pwdCache != nil {
						entry, found := z.pwdCache.LookupUserByUid(int(uids[0]))
						if found {
							res.Username = entry.Username()
						}
					}
				}
			}
		}

		res.Name, err = p.NameWithContext(ctx)
		if err != nil {
			continue
		}

		cmdLine, err := p.CmdlineSliceWithContext(ctx)
		if err != nil || len(cmdLine) == 0 || len(cmdLine[0]) == 0 {
			cmdLine = []string{res.Name}
		}

		// Remove empty argument. This is usually generated by
		// processes which alter their name and result in
		// npm '' '' '' '' '' '' '' '' '' '' '' ''
		res.CmdLineList = make([]string, 0)

		for _, v := range cmdLine {
			if len(v) > 0 {
				res.CmdLineList = append(res.CmdLineList, v)
			}
		}

		res.CmdLine = strings.Join(res.CmdLineList, " ")

		res.Executable, err = p.ExeWithContext(ctx)
		if err != nil {
			res.Executable = ""
		}

		memoryInfo, err := p.MemoryInfoWithContext(ctx)
		if err == nil {
			res.MemoryRSS = memoryInfo.RSS / 1024
		}

		cpuTimes, err := p.TimesWithContext(ctx)
		if err == nil {
			res.CPUTime = timeStatTotal(*cpuTimes)
		}

		status, err := p.StatusWithContext(ctx)
		if err != nil || len(status) == 0 {
			continue
		}

		res.Status = PsStat2Status(status[0])

		numThreads, _ := p.NumThreads()

		res.NumThreads = int(numThreads)

		processes = append(processes, res)
	}

	return processes, nil, nil
}

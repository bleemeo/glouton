/* eslint-disable no-undef */
const path = require("path");
const webpack = require("webpack");
const ForkTsCheckerWebpackPlugin = require("fork-ts-checker-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const buildTimestamp = new Date().getTime();
const src = path.resolve(__dirname, "src");
const nodeModule = path.resolve(__dirname, "node_modules");

var LodashModuleReplacementPlugin = require("lodash-webpack-plugin");

/*
// Uncomment the following lines to enable the bundle analyzer
const BundleAnalyzerPlugin =
  require("webpack-bundle-analyzer").BundleAnalyzerPlugin;
*/

// The following packages are loaded with <script> in the HTML generated by Django
// (in spa.html or base.html). So we don't have them as npm packages and thus
// Webpack need to be aware that they are available in the global scope (aka window)
module.exports = (_, argv) => {
  const isDev = argv.mode === "development";
  const plugins = [];

  if (!isDev) {
    plugins.push(
      new webpack.IgnorePlugin({ resourceRegExp: /^(redux-logger)(\/.+)?$/ }),
    );
  }

  plugins.push(
    new ForkTsCheckerWebpackPlugin(),
    new MiniCssExtractPlugin({
      chunkFilename: `css/panel-glouton-main.css?ts=${buildTimestamp}`,
    }),
    new webpack.DefinePlugin({
      __DEV__: isDev,
    }),
  );

  plugins.push(new LodashModuleReplacementPlugin());
  plugins.push(new webpack.optimize.ModuleConcatenationPlugin());
  /*
  // Uncomment the following line to enable the bundle analyzer
  plugins.push(new BundleAnalyzerPlugin());
  */

  const result = {
    bail: !isDev,
    // TODO: drop this once https://github.com/webpack/webpack-dev-server/issues/2758 is fixed
    // (that is when webpack-dev-server 4.0 is release).
    target: isDev ? "web" : "browserslist",
    entry: {
      "panel-glouton-main": ["./src/index.ts"],
    },
    output: {
      // hack. publicPath is used to generate URL in CSS & JS.
      // Since both js & css are generated in a folder ("css" and "js"), then
      // "../" will be the root output of webpack.
      publicPath: "../",
      filename: `js/[name].js?ts=${buildTimestamp}`,
      chunkFilename: `js/[name].${buildTimestamp}.js`,
    },
    devServer: {
      hot: false, // Force full-reload on change
      port: 3015,
      devMiddleware: {
        publicPath: "/",
      },
    },
    resolve: {
      extensions: [".tsx", ".ts", ".jsx", ".js"],
    },
    plugins: plugins,
    module: {
      rules: [
        {
          test: /\.[jt]sx?$/,
          include: [
            src,
            path.join(nodeModule, "jsvat"),
            path.join(nodeModule, "d3-array"),
            path.join(nodeModule, "d3-brush"),
            path.join(nodeModule, "d3-chord"),
            path.join(nodeModule, "d3-delaunay"),
            path.join(nodeModule, "d3-force"),
            path.join(nodeModule, "d3-hierarchy"),
            path.join(nodeModule, "d3-polygon"),
            path.join(nodeModule, "d3-random"),
            path.join(nodeModule, "d3-scale"),
            path.join(nodeModule, "d3-selection"),
            path.join(nodeModule, "d3-shape"),
            path.join(nodeModule, "d3-zoom"),
            path.join(nodeModule, "delaunator"),
            path.join(nodeModule, "internmap"),
          ],
          loader: "babel-loader",
        },
        {
          test: /\.(scss)$/,
          use: [
            {
              loader: MiniCssExtractPlugin.loader,
            },
            {
              loader: "css-loader",
              options: {
                sourceMap: true,
              },
            },
            {
              loader: "sass-loader",
              options: {
                sourceMap: true,
              },
            },
          ],
        },
        // css don't use MiniCssExtractPlugin, because we don't want to extract
        // ALL style in separated file. Only style used by bleemeo-api (for signup & login page).
        {
          test: /(\.css$)/,
          use: [{ loader: "style-loader" }, { loader: "css-loader" }],
        },
        {
          test: /\.(png)$/,
          include: [src],
          type: "asset/resource",
        },
        {
          test: /\.(svg)$/,
          include: [src],
          type: "asset/source",
        },
        {
          test: /\.(woff|woff2|eot|ttf|svg)$/,
          type: "asset",
          parser: {
            dataUrlCondition: {
              maxSize: 100 * 1024,
            },
          },
        },
      ],
    },
  };

  if (isDev) {
    result.devtool = "cheap-module-source-map";
  }

  return result;
};
